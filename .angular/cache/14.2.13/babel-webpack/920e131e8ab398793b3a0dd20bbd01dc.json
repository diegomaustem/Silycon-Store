{"ast":null,"code":"import _asyncToGenerator from \"/home/maustem/development/angular/Silycon-Store/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  apm: false,\n  leadZero: false,\n  keepCharacterPositions: false,\n  triggerOnMaskChange: false,\n  inputTransformFn: value => value,\n  outputTransformFn: value => value,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = [\"Hh:m0:s0\"\n/* MaskExpression.HOURS_MINUTES_SECONDS */\n, \"Hh:m0\"\n/* MaskExpression.HOURS_MINUTES */\n, \"m0:s0\"\n/* MaskExpression.MINUTES_SECONDS */\n];\nconst withoutValidation = [\"percent\"\n/* MaskExpression.PERCENT */\n, \"Hh\"\n/* MaskExpression.HOURS_HOUR */\n, \"s0\"\n/* MaskExpression.SECONDS */\n, \"m0\"\n/* MaskExpression.MINUTES */\n, \"separator\"\n/* MaskExpression.SEPARATOR */\n, \"d0/M0/0000\"\n/* MaskExpression.DAYS_MONTHS_YEARS */\n, \"d0/M0\"\n/* MaskExpression.DAYS_MONTHS */\n, \"d0\"\n/* MaskExpression.DAYS */\n, \"M0\"\n/* MaskExpression.MONTHS */\n];\n\nclass NgxMaskApplierService {\n  constructor() {\n    this._config = inject(NGX_MASK_CONFIG);\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.hiddenInput = this._config.hiddenInput;\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.specialCharacters = this._config.specialCharacters;\n    this.patterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n    this.leadZero = this._config.leadZero;\n    this.apm = this._config.apm;\n    this.inputTransformFn = this._config.inputTransformFn;\n    this.outputTransformFn = this._config.outputTransformFn;\n    this.keepCharacterPositions = this._config.keepCharacterPositions;\n    this._shift = new Set();\n    this.plusOnePosition = false;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.showKeepCharacterExp = '';\n    this.shownMaskExpression = '';\n    this.deletedSpecialCharacter = false;\n\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ;\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ;\n      let res = x[0] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ;\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\"\n      /* MaskExpression.EMPTY_STRING */\n      );\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === \"-\"\n        /* MaskExpression.MINUS */\n        ) {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      const rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substring(0, precision + 1);\n    };\n\n    this.percentage = str => {\n      const sanitizedStr = str.replace(',', '.');\n      const value = Number(sanitizedStr);\n      return !isNaN(value) && value >= 0 && value <= 100;\n    };\n\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split(\".\"\n      /* MaskExpression.DOT */\n      );\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, this.suffix?.length);\n\n        if (inputValue.includes(substr) && i !== this.suffix?.length - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, \"\"\n          /* MaskExpression.EMPTY_STRING */\n          );\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator); // eslint-disable-next-line no-param-reassign\n\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision; // eslint-disable-next-line no-param-reassign\n\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n  }\n\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ;\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n\n    if (inputValue === '(' && this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = '';\n    }\n\n    const inputArray = inputValue.toString().split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    );\n\n    if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\"\n    /* MaskExpression.MINUS */\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      result += inputValue.slice(cursor, cursor + 1);\n    }\n\n    if (maskExpression === \"IP\"\n    /* MaskExpression.IP */\n    ) {\n      const valuesIP = inputValue.split(\".\"\n      /* MaskExpression.DOT */\n      );\n      this.ipError = this._validIP(valuesIP); // eslint-disable-next-line no-param-reassign\n\n      maskExpression = '099.099.099.099';\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        );\n      }\n    }\n\n    if (maskExpression === \"CPF_CNPJ\"\n    /* MaskExpression.CPF_CNPJ */\n    ) {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n\n    if (maskExpression.startsWith(\"percent\"\n    /* MaskExpression.PERCENT */\n    )) {\n      if (inputValue.match('[a-z]|[A-Z]') || // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n\n      const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\"\n      /* MaskExpression.DOT */\n      ;\n\n      if (inputValue.indexOf(decimalMarker) > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n        let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n\n        if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\"\n        /* MaskExpression.MINUS */\n        && !backspaced) {\n          base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n        } // eslint-disable-next-line no-param-reassign\n\n\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n      }\n\n      let value = '';\n      this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\"\n      /* MaskExpression.MINUS */\n      ? value = inputValue.slice(cursor + 1, cursor + inputValue.length) : value = inputValue;\n\n      if (this.percentage(value)) {\n        result = this._splitPercentZero(inputValue);\n      } else {\n        result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n      }\n    } else if (maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    )) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      }\n\n      const precision = this.getPrecision(maskExpression);\n      const decimalMarker = Array.isArray(this.decimalMarker) ? \".\"\n      /* MaskExpression.DOT */\n      : this.decimalMarker;\n\n      if (precision === 0) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.allowNegativeNumbers ? inputValue.length > 2 && inputValue[0] === \"-\"\n        /* MaskExpression.MINUS */\n        && inputValue[1] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        && inputValue[2] !== this.thousandSeparator && inputValue[2] !== \",\"\n        /* MaskExpression.COMMA */\n        && inputValue[2] !== \".\"\n        /* MaskExpression.DOT */\n        ? '-' + inputValue.slice(2, inputValue.length) : inputValue[0] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        && inputValue.length > 1 && inputValue[1] !== this.thousandSeparator && inputValue[1] !== \",\"\n        /* MaskExpression.COMMA */\n        && inputValue[1] !== \".\"\n        /* MaskExpression.DOT */\n        ? inputValue.slice(1, inputValue.length) : inputValue : inputValue.length > 1 && inputValue[0] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        && inputValue[1] !== this.thousandSeparator && inputValue[1] !== \",\"\n        /* MaskExpression.COMMA */\n        && inputValue[1] !== \".\"\n        /* MaskExpression.DOT */\n        ? inputValue.slice(1, inputValue.length) : inputValue;\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        if (inputValue[0] === decimalMarker && inputValue.length > 1) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = \"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          + inputValue.slice(0, inputValue.length + 1);\n          this.plusOnePosition = true;\n        }\n\n        if (inputValue[0] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        && inputValue[1] !== decimalMarker && inputValue[1] !== this.thousandSeparator) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.length > 1 ? inputValue.slice(0, 1) + decimalMarker + inputValue.slice(1, inputValue.length + 1) : inputValue;\n          this.plusOnePosition = true;\n        }\n\n        if (this.allowNegativeNumbers && inputValue[0] === \"-\"\n        /* MaskExpression.MINUS */\n        && (inputValue[1] === decimalMarker || inputValue[1] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        )) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue[1] === decimalMarker && inputValue.length > 2 ? inputValue.slice(0, 1) + \"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          + inputValue.slice(1, inputValue.length) : inputValue[1] === \"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          && inputValue.length > 2 && inputValue[2] !== decimalMarker ? inputValue.slice(0, 2) + decimalMarker + inputValue.slice(2, inputValue.length) : inputValue;\n          this.plusOnePosition = true;\n        }\n      }\n\n      if (backspaced) {\n        if (inputValue[0] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        && inputValue[1] === this.decimalMarker && (inputValue[position] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        || inputValue[position] === this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.slice(2, inputValue.length);\n        }\n\n        if (inputValue[0] === \"-\"\n        /* MaskExpression.MINUS */\n        && inputValue[1] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        && inputValue[2] === this.decimalMarker && (inputValue[position] === \"0\"\n        /* MaskExpression.NUMBER_ZERO */\n        || inputValue[position] === this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = \"-\"\n          /* MaskExpression.MINUS */\n          + inputValue.slice(3, inputValue.length);\n        } // eslint-disable-next-line no-param-reassign\n\n\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      } // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, ''); //.replace(decimalMarkerEscaped, '');\n\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\"\n          /* MaskExpression.EMPTY_STRING */\n          );\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(\",\"\n      /* MaskExpression.COMMA */\n      ) - inputValue.indexOf(\",\"\n      /* MaskExpression.COMMA */\n      );\n      const shiftStep = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n        backspaceShift = true;\n        let _shift = 0;\n\n        do {\n          this._shift.add(position + _shift);\n\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (result[position - 1] === this.decimalMarker || shiftStep === -4 || shiftStep === -3 || result[position] === \",\"\n      /* MaskExpression.COMMA */\n      ) {\n        this._shift.clear();\n\n        this._shift.add(position - 1);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(\",\"\n      /* MaskExpression.COMMA */\n      ) >= position && position > 3) || !(result.indexOf(\".\"\n      /* MaskExpression.DOT */\n      ) >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n\n        backspaceShift = true;\n        shift = shiftStep; // eslint-disable-next-line no-param-reassign\n\n        position += shiftStep;\n\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for ( // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n\n        const symbolStarInPattern = (\"*\"\n        /* MaskExpression.SYMBOL_STAR */\n        in this.patterns);\n\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ) && maskExpression[cursor + 1] === \"?\"\n        /* MaskExpression.SYMBOL_QUESTION */\n        ) {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === \"*\"\n        /* MaskExpression.SYMBOL_STAR */\n        && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        )) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ) && maskExpression[cursor + 1] === \"*\"\n        /* MaskExpression.SYMBOL_STAR */\n        && !symbolStarInPattern) {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === \"?\"\n        /* MaskExpression.SYMBOL_QUESTION */\n        && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        )) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        )) {\n          if (maskExpression[cursor] === \"H\"\n          /* MaskExpression.HOURS */\n          ) {\n            if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === \"h\"\n          /* MaskExpression.HOUR */\n          ) {\n            if (this.apm ? result.length === 1 && Number(result) > 1 || result === '1' && Number(inputSymbol) > 2 || inputValue.slice(cursor - 1, cursor).length === 1 && Number(inputValue.slice(cursor - 1, cursor)) > 2 || inputValue.slice(cursor - 1, cursor) === '1' && Number(inputSymbol) > 2 : result === '2' && Number(inputSymbol) > 3 || (result.slice(cursor - 2, cursor) === '2' || result.slice(cursor - 3, cursor) === '2' || result.slice(cursor - 4, cursor) === '2' || result.slice(cursor - 1, cursor) === '2') && Number(inputSymbol) > 3 && cursor > 10) {\n              // eslint-disable-next-line no-param-reassign\n              position = position + 1;\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === \"m\"\n          /* MaskExpression.MINUTE */\n          || maskExpression[cursor] === \"s\"\n          /* MaskExpression.SECOND */\n          ) {\n            if (Number(inputSymbol) > 5) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          const daysCount = 31;\n          const inputValueCursor = inputValue[cursor];\n          const inputValueCursorPlusOne = inputValue[cursor + 1];\n          const inputValueCursorPlusTwo = inputValue[cursor + 2];\n          const inputValueCursorMinusOne = inputValue[cursor - 1];\n          const inputValueCursorMinusTwo = inputValue[cursor - 2];\n          const inputValueCursorMinusThree = inputValue[cursor - 3];\n          const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n          const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n          const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n          const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n\n          if (maskExpression[cursor] === \"d\"\n          /* MaskExpression.DAY */\n          ) {\n            const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\"\n            /* MaskExpression.MONTHS */\n            ;\n            const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\"\n            /* MaskExpression.MONTHS */\n            && this.specialCharacters.includes(inputValueCursorMinusTwo);\n\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || !maskStartWithMonth && (Number(inputValueSliceCursorPlusTwo) > daysCount || Number(inputValueSliceMinusOnePlusOne) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne)) || (startWithMonthInput ? Number(inputValueSliceMinusOnePlusOne) > daysCount || !this.specialCharacters.includes(inputValueCursor) && this.specialCharacters.includes(inputValueCursorPlusTwo) || this.specialCharacters.includes(inputValueCursor) : Number(inputValueSliceCursorPlusTwo) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne))) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === \"M\"\n          /* MaskExpression.MONTH */\n          ) {\n            const monthsCount = 12; // mask without day\n\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne)); // day<10 && month<12 for input\n\n            const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n            const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) && (this.specialCharacters.includes(inputValueCursorMinusTwo) && Number(inputValueSliceMinusOnePlusOne) > monthsCount && !this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursorMinusThree) && Number(inputValueSliceMinusTwoCursor) > monthsCount && !this.specialCharacters.includes(inputValueCursorMinusOne) || this.specialCharacters.includes(inputValueCursorMinusOne)); //  month<12 && day<10 for input\n\n            const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && this.specialCharacters.includes(inputValueCursorMinusOne) && (Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne)); // cursor === 5 && without days\n\n            const day2monthInputDot = Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5 || this.specialCharacters.includes(inputValueCursorPlusOne) && cursor === 5; // // day<10 && month<12 for paste whole data\n\n            const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) && Number(inputValueSliceMinusTwoCursor) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n            const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueCursorMinusOne) && Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthPaste || day1monthPaste || day2monthInput || day2monthInputDot && !this.leadZeroDateTime) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          result += inputSymbol;\n          cursor++;\n        } else if (inputSymbol === \" \"\n        /* MaskExpression.WHITE_SPACE */\n        && maskExpression[cursor] === \" \"\n        /* MaskExpression.WHITE_SPACE */\n        || inputSymbol === \"/\"\n        /* MaskExpression.SLASH */\n        && maskExpression[cursor] === \"/\"\n        /* MaskExpression.SLASH */\n        ) {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n\n          i--;\n        } else if (maskExpression[cursor] === \"9\"\n        /* MaskExpression.NUMBER_NINE */\n        && this.showMaskTyped) {\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n        } else if (this.patterns[maskExpression[cursor] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ] && this.patterns[maskExpression[cursor] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ]?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/) && !this.patterns[maskExpression[cursor] ?? \"\"\n          /* MaskExpression.EMPTY_STRING */\n          ]?.optional) {\n            result += inputArray[cursor];\n          }\n\n          if (maskExpression.includes(\"9\"\n          /* MaskExpression.NUMBER_NINE */\n          + \"*\"\n          /* MaskExpression.SYMBOL_STAR */\n          ) && maskExpression.includes(\"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          + \"*\"\n          /* MaskExpression.SYMBOL_STAR */\n          )) {\n            cursor++;\n          }\n\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === \"*\"\n        /* MaskExpression.SYMBOL_STAR */\n        && this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === \"?\"\n        /* MaskExpression.SYMBOL_QUESTION */\n        && this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.specialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter && this.placeHolderCharacter.length === 1) {\n          stepBack = true;\n        }\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length && this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift = justPasted && !maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    ) ? cursor : this._shift.has(position) ? shift : 0;\n\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n\n    if (shift < 0) {\n      this._shift.clear();\n    }\n\n    let onlySpecial = false;\n\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.specialCharacters.includes(char));\n    }\n\n    let res = `${this.prefix}${onlySpecial ? \"\"\n    /* MaskExpression.EMPTY_STRING */\n    : result}${this.showMaskTyped ? '' : this.suffix}`;\n\n    if (result.length === 0) {\n      res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n    }\n\n    if (result.includes(\"-\"\n    /* MaskExpression.MINUS */\n    ) && this.prefix && this.allowNegativeNumbers) {\n      if (backspaced && result === \"-\"\n      /* MaskExpression.MINUS */\n      ) {\n        return '';\n      }\n\n      res = `${\"-\"\n      /* MaskExpression.MINUS */\n      }${this.prefix}${result.split(\"-\"\n      /* MaskExpression.MINUS */\n      ).join(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      )}${this.suffix}`;\n    }\n\n    return res;\n  }\n\n  _findDropSpecialChar(inputSymbol) {\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      return this.dropSpecialCharacters.find(val => val === inputSymbol);\n    }\n\n    return this._findSpecialChar(inputSymbol);\n  }\n\n  _findSpecialChar(inputSymbol) {\n    return this.specialCharacters.find(val => val === inputSymbol);\n  }\n\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.patterns = this.customPattern ? this.customPattern : this.patterns;\n    return (this.patterns[maskSymbol]?.pattern && this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ?? false;\n  }\n\n  _stripToDecimal(str) {\n    return str.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker : // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === \"-\"\n      /* MaskExpression.MINUS */\n      && idx === 0 && this.allowNegativeNumbers;\n    }).join(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    );\n  }\n\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n\n    return char;\n  }\n\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === \"\"\n        /* MaskExpression.EMPTY_STRING */\n        || Number(value) > 255;\n      }\n\n      return value === \"\"\n      /* MaskExpression.EMPTY_STRING */\n      || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n\n  _splitPercentZero(value) {\n    const decimalIndex = typeof this.decimalMarker === 'string' ? value.indexOf(this.decimalMarker) : value.indexOf(\".\"\n    /* MaskExpression.DOT */\n    );\n\n    if (decimalIndex === -1) {\n      const parsedValue = parseInt(value, 10);\n      return isNaN(parsedValue) ? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      : parsedValue.toString();\n    } else {\n      const integerPart = parseInt(value.substring(0, decimalIndex), 10);\n      const decimalPart = value.substring(decimalIndex + 1);\n      const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n      const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\"\n      /* MaskExpression.DOT */\n      ;\n      return integerString === \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      : integerString + decimal + decimalPart;\n    }\n  }\n\n}\n\nNgxMaskApplierService.ɵfac = function NgxMaskApplierService_Factory(t) {\n  return new (t || NgxMaskApplierService)();\n};\n\nNgxMaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskApplierService,\n  factory: NgxMaskApplierService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskApplierService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass NgxMaskService extends NgxMaskApplierService {\n  constructor() {\n    super(...arguments);\n    this.isNumberValue = false;\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    this.writingValue = false;\n    this.maskChanged = false;\n    this._maskExpressionArray = [];\n    this.triggerOnMaskChange = false;\n    this._previousValue = '';\n    this._currentValue = '';\n    this._emitValue = false; // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n\n    this.onChange = _ => {};\n\n    this._elementRef = inject(ElementRef, {\n      optional: true\n    });\n    this.document = inject(DOCUMENT);\n    this._config = inject(NGX_MASK_CONFIG);\n    this._renderer = inject(Renderer2, {\n      optional: true\n    });\n  } // eslint-disable-next-line complexity\n\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ;\n\n    if (this.maskExpression === \"IP\"\n    /* MaskExpression.IP */\n    && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\"\n      /* MaskExpression.HASH */\n      );\n    }\n\n    if (this.maskExpression === \"CPF_CNPJ\"\n    /* MaskExpression.CPF_CNPJ */\n    && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\"\n      /* MaskExpression.HASH */\n      );\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown + this.suffix;\n    }\n\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] ?? \"\"\n    /* MaskExpression.EMPTY_STRING */\n    : \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ;\n    let newInputValue = '';\n\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = inputValue && inputValue.length === 1 ? inputValue.split(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      ) : this.actualValue.split(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      ); // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n        this.selStart = Number(this.selStart);\n        this.selEnd = Number(this.selEnd);\n      } else {\n        inputValue !== \"\"\n        /* MaskExpression.EMPTY_STRING */\n        && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? backspaced ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(inputValue.length - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      }\n\n      if (this.showMaskTyped) {\n        if (!this.hiddenInput) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = this.removeMask(inputValue);\n        }\n      } // eslint-enable  @typescript-eslint/no-unused-expressions\n\n\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      )) : inputValue;\n    }\n\n    if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n      newInputValue = inputValue;\n    }\n\n    if (backspaced && this.specialCharacters.indexOf(this.maskExpression[position] ?? \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) !== -1 && this.showMaskTyped) {\n      newInputValue = this._currentValue;\n    }\n\n    if (this.deletedSpecialCharacter && position) {\n      if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n        // eslint-disable-next-line no-param-reassign\n        position = position + 1;\n      } else if (maskExpression.slice(position - 1, position + 1) !== \"M0\"\n      /* MaskExpression.MONTHS */\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        position = position - 2;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      this.deletedSpecialCharacter = false;\n    }\n\n    if (this.showMaskTyped && this.placeHolderCharacter.length === 1 && !this.leadZeroDateTime) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n\n    if (this.maskChanged) {\n      newInputValue = inputValue;\n    } else {\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    }\n\n    if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted) {\n      const value = this.dropSpecialCharacters ? this.removeMask(this.actualValue) : this.actualValue;\n      this.formControlResult(value);\n      return this.actualValue ? this.actualValue : this.prefix + this.maskIsShown + this.suffix;\n    }\n\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result); // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n    if (this.thousandSeparator === \".\"\n    /* MaskExpression.DOT */\n    && this.decimalMarker === \".\"\n    /* MaskExpression.DOT */\n    ) {\n      this.decimalMarker = \",\"\n      /* MaskExpression.COMMA */\n      ;\n    } // b) remove decimal marker from list of special characters to mask\n\n\n    if (this.maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    ) && this.dropSpecialCharacters === true) {\n      this.specialCharacters = this.specialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n\n    if (result || result === '') {\n      this._previousValue = this._currentValue;\n      this._currentValue = result;\n      this._emitValue = this._previousValue !== this._currentValue || this.maskChanged || this._previousValue === this._currentValue && justPasted;\n    }\n\n    this._emitValue ? this.formControlResult(result) : '';\n\n    if (!this.showMaskTyped || this.showMaskTyped && this.hiddenInput) {\n      if (this.hiddenInput) {\n        if (backspaced) {\n          return this.hideInput(result, this.maskExpression);\n        }\n\n        return this.hideInput(result, this.maskExpression) + this.maskIsShown.slice(result.length);\n      }\n\n      return result;\n    }\n\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown + this.suffix;\n\n    if (this.maskExpression.includes(\"H\"\n    /* MaskExpression.HOURS */\n    )) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === \"IP\"\n    /* MaskExpression.IP */\n    || this.maskExpression === \"CPF_CNPJ\"\n    /* MaskExpression.CPF_CNPJ */\n    ) {\n      return result + prefNmask;\n    }\n\n    return result + prefNmask.slice(resLen);\n  } // get the number of characters that were shifted\n\n\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n\n    return countSkipedSymbol;\n  }\n\n  applyValueChanges(position, justPasted, backspaced, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    const formElement = this._elementRef?.nativeElement;\n\n    if (!formElement) {\n      return;\n    }\n\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n\n    this.clearIfNotMatchFn();\n  }\n\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).map((curr, index) => {\n      if (this.patterns && this.patterns[maskExpression[index] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ] && this.patterns[maskExpression[index] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ]?.symbol) {\n        return this.patterns[maskExpression[index] ?? \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ]?.symbol;\n      }\n\n      return curr;\n    }).join(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    );\n  } // this function is not necessary, it checks result against maskExpression\n\n\n  getActualValue(res) {\n    const compare = res.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).filter((symbol, i) => {\n      const maskChar = this.maskExpression[i] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ;\n      return this._checkSymbolMask(symbol, maskChar) || this.specialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n\n    if (compare.join(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) === res) {\n      return compare.join(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      );\n    }\n\n    return res;\n  }\n\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).map((currSymbol, index) => {\n      if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ;\n        return replaceSymbol;\n      }\n\n      return currSymbol;\n    }) || [];\n    return newInputValue.join(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    );\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n\n\n  numberToString(value) {\n    if (!value && value !== 0 || this.maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    ) && (this.leadZero || !this.dropSpecialCharacters) || this.maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    ) && this.separatorLimit.length > 14 && String(value).length > 14) {\n      return String(value);\n    }\n\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    }).replace(`/${\"-\"\n    /* MaskExpression.MINUS */\n    }/`, \"-\"\n    /* MaskExpression.MINUS */\n    );\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === \"IP\"\n        /* MaskExpression.IP */\n        ) {\n          return this._checkForIp(inputVal);\n        }\n\n        if (this.maskExpression === \"CPF_CNPJ\"\n        /* MaskExpression.CPF_CNPJ */\n        ) {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n\n      if (this.placeHolderCharacter.length === this.maskExpression.length) {\n        return this.placeHolderCharacter;\n      }\n\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n\n    return '';\n  }\n\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef?.nativeElement;\n\n    if (!formElement) {\n      return;\n    }\n\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(this.placeHolderCharacter, \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).length) {\n      this.formElementProperty = ['value', \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ];\n      this.applyMask('', this.maskExpression);\n    }\n  }\n\n  set formElementProperty([name, value]) {\n    if (!this._renderer || !this._elementRef) {\n      return;\n    }\n\n    Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n  }\n\n  checkDropSpecialCharAmount(mask) {\n    const chars = mask.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).filter(item => this._findDropSpecialChar(item));\n    return chars.length;\n  }\n\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n\n  _checkForIp(inputVal) {\n    if (inputVal === \"#\"\n    /* MaskExpression.HASH */\n    ) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ;\n\n      if (!value) {\n        continue;\n      }\n\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n\n    return '';\n  }\n\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === \"#\"\n    /* MaskExpression.HASH */\n    ) {\n      return cpf;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ;\n\n      if (!value) {\n        continue;\n      }\n\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n\n    if (arr.length === 11) {\n      return '';\n    }\n\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n\n      return cnpj.slice(15, cnpj.length);\n    }\n\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n\n\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n\n\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))))) : '';\n      this.maskChanged = false;\n      return;\n    }\n\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n    } else if (this.dropSpecialCharacters || !this.dropSpecialCharacters && this.prefix === inputValue) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n    } else {\n      this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n    }\n  }\n\n  _toNumber(value) {\n    if (!this.isNumberValue || value === \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) {\n      return value;\n    }\n\n    if (this.maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    ) && (this.leadZero || !this.dropSpecialCharacters)) {\n      return value;\n    }\n\n    if (String(value).length > 16 && this.separatorLimit.length > 14) {\n      return String(value);\n    }\n\n    const num = Number(value);\n\n    if (this.maskExpression.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    ) && Number.isNaN(num)) {\n      const val = String(value).replace(',', '.');\n      return Number(val);\n    }\n\n    return Number.isNaN(num) ? value : num;\n  }\n\n  _removeMask(value, specialCharactersForRemove) {\n    if (this.maskExpression.startsWith(\"percent\"\n    /* MaskExpression.PERCENT */\n    ) && value.includes(\".\"\n    /* MaskExpression.DOT */\n    )) {\n      return value;\n    }\n\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) : value;\n  }\n\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n\n    return value ? value.replace(this.prefix, \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) : value;\n  }\n\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n\n    return value ? value.replace(this.suffix, \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) : value;\n  }\n\n  _retrieveSeparatorValue(result) {\n    let specialCharacters = Array.isArray(this.dropSpecialCharacters) ? this.specialCharacters.filter(v => {\n      return this.dropSpecialCharacters.includes(v);\n    }) : this.specialCharacters;\n\n    if (!this.deletedSpecialCharacter && this._checkPatternForSpace() && result.includes(\" \"\n    /* MaskExpression.WHITE_SPACE */\n    ) && this.maskExpression.includes(\"*\"\n    /* MaskExpression.SYMBOL_STAR */\n    )) {\n      specialCharacters = specialCharacters.filter(char => char !== \" \"\n      /* MaskExpression.WHITE_SPACE */\n      );\n    }\n\n    return this._removeMask(result, specialCharacters);\n  }\n\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), \".\"\n    /* MaskExpression.DOT */\n    );\n  }\n\n  _checkSymbols(result) {\n    if (result === \"\"\n    /* MaskExpression.EMPTY_STRING */\n    ) {\n      return result;\n    }\n\n    if (this.maskExpression.startsWith(\"percent\"\n    /* MaskExpression.PERCENT */\n    ) && this.decimalMarker === \",\"\n    /* MaskExpression.COMMA */\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      result = result.replace(\",\"\n      /* MaskExpression.COMMA */\n      , \".\"\n      /* MaskExpression.DOT */\n      );\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n\n      if (this.separatorLimit.length > 14) {\n        return String(separatorValue);\n      }\n\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return separatorValue;\n    }\n  }\n\n  _checkPatternForSpace() {\n    for (const key in this.patterns) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\n        const patternString = this.patterns[key]?.pattern.toString();\n        const pattern = this.patterns[key]?.pattern;\n\n        if (patternString?.includes(\" \"\n        /* MaskExpression.WHITE_SPACE */\n        ) && pattern?.test(this.maskExpression)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  } // TODO should think about helpers or separting decimal precision to own property\n\n\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  _checkPrecision(separatorExpression, separatorValue) {\n    const separatorPrecision = separatorExpression.slice(10, 11);\n\n    if (separatorExpression.indexOf('2') > 0 || this.leadZero && Number(separatorPrecision) > 1) {\n      if (this.decimalMarker === \",\"\n      /* MaskExpression.COMMA */\n      && this.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        separatorValue = separatorValue.replace(',', '.');\n      }\n\n      return this.leadZero ? Number(separatorValue).toFixed(Number(separatorPrecision)) : Number(separatorValue).toFixed(2);\n    }\n\n    return this.numberToString(separatorValue);\n  }\n\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).reduce((accum, currVal, index) => {\n      this._start = currVal === \"{\"\n      /* MaskExpression.CURLY_BRACKETS_LEFT */\n      ? index : this._start;\n\n      if (currVal !== \"}\"\n      /* MaskExpression.CURLY_BRACKETS_RIGHT */\n      ) {\n        return this._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n\n      if (maskExp.slice(0, this._start).length > 1 && maskExp.includes(\"S\"\n      /* MaskExpression.LETTER_S */\n      )) {\n        const symbols = maskExp.slice(0, this._start - 1);\n        return symbols.includes(\"{\"\n        /* MaskExpression.CURLY_BRACKETS_LEFT */\n        ) ? accum + replaceWith : symbols + accum + replaceWith;\n      } else {\n        return accum + replaceWith;\n      }\n    }, '') || maskExp;\n  }\n\n  currentLocaleDecimalMarker() {\n    return 1.1.toLocaleString().substring(1, 2);\n  }\n\n}\n\nNgxMaskService.ɵfac = /* @__PURE__ */function () {\n  let ɵNgxMaskService_BaseFactory;\n  return function NgxMaskService_Factory(t) {\n    return (ɵNgxMaskService_BaseFactory || (ɵNgxMaskService_BaseFactory = i0.ɵɵgetInheritedFactory(NgxMaskService)))(t || NgxMaskService);\n  };\n}();\n\nNgxMaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskService,\n  factory: NgxMaskService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskService, [{\n    type: Injectable\n  }], null, null);\n})(); // tslint:disable deprecation\n// tslint:disable no-input-rename\n\n\nclass NgxMaskDirective {\n  constructor() {\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.leadZero = null;\n    this.triggerOnMaskChange = null;\n    this.apm = null;\n    this.inputTransformFn = null;\n    this.outputTransformFn = null;\n    this.keepCharacterPositions = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n    this._isFocused = false;\n    /**For IME composition event */\n\n    this._isComposing = false;\n    this.document = inject(DOCUMENT);\n    this._maskService = inject(NgxMaskService, {\n      self: true\n    });\n    this._config = inject(NGX_MASK_CONFIG); // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n\n    this.onChange = _ => {}; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n    this.onTouch = () => {};\n  }\n\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      leadZero,\n      triggerOnMaskChange,\n      apm,\n      inputTransformFn,\n      outputTransformFn,\n      keepCharacterPositions\n    } = changes;\n\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n\n      if (maskExpression.currentValue && maskExpression.currentValue.split(\"||\"\n      /* MaskExpression.OR */\n      ).length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split(\"||\"\n        /* MaskExpression.OR */\n        ).sort((a, b) => {\n          return a.length - b.length;\n        });\n\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || \"\"\n        /* MaskExpression.EMPTY_STRING */\n        ;\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.specialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.specialCharacters = this._maskService.specialCharacters.filter(c => c !== \"-\"\n        /* MaskExpression.MINUS */\n        );\n      }\n    } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n    if (patterns && patterns.currentValue) {\n      this._maskService.patterns = patterns.currentValue;\n    }\n\n    if (apm && apm.currentValue) {\n      this._maskService.apm = apm.currentValue;\n    }\n\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n\n      if (showMaskTyped.previousValue === false && showMaskTyped.currentValue === true && this._isFocused) {\n        requestAnimationFrame(() => {\n          this._maskService._elementRef?.nativeElement.click();\n        });\n      }\n    }\n\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n\n    if (leadZero) {\n      this._maskService.leadZero = leadZero.currentValue;\n    }\n\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n\n    if (inputTransformFn) {\n      this._maskService.inputTransformFn = inputTransformFn.currentValue;\n    }\n\n    if (outputTransformFn) {\n      this._maskService.outputTransformFn = outputTransformFn.currentValue;\n    }\n\n    if (keepCharacterPositions) {\n      this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n    }\n\n    this._applyMask();\n  } // eslint-disable-next-line complexity\n\n\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskValue.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    )) {\n      return null;\n    }\n\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n\n      if (this._maskValue.startsWith(\"percent\"\n      /* MaskExpression.PERCENT */\n      )) {\n        return null;\n      }\n\n      for (const key in this._maskService.patterns) {\n        if (this._maskService.patterns[key]?.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split(\"\"\n            /* MaskExpression.EMPTY_STRING */\n            ).filter(i => i === key).join(\"\"\n            /* MaskExpression.EMPTY_STRING */\n            );\n\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf(\"{\"\n      /* MaskExpression.CURLY_BRACKETS_LEFT */\n      ) === 1 && value.toString().length === this._maskValue.length + Number((this._maskValue.split(\"{\"\n      /* MaskExpression.CURLY_BRACKETS_LEFT */\n      )[1] ?? \"\"\n      /* MaskExpression.EMPTY_STRING */\n      ).split(\"}\"\n      /* MaskExpression.CURLY_BRACKETS_RIGHT */\n      )[0]) - 4) {\n        return null;\n      } else if (this._maskValue.indexOf(\"*\"\n      /* MaskExpression.SYMBOL_STAR */\n      ) > 1 && value.toString().length < this._maskValue.indexOf(\"*\"\n      /* MaskExpression.SYMBOL_STAR */\n      ) || this._maskValue.indexOf(\"?\"\n      /* MaskExpression.SYMBOL_QUESTION */\n      ) > 1 && value.toString().length < this._maskValue.indexOf(\"?\"\n      /* MaskExpression.SYMBOL_QUESTION */\n      ) || this._maskValue.indexOf(\"{\"\n      /* MaskExpression.CURLY_BRACKETS_LEFT */\n      ) === 1) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.indexOf(\"*\"\n      /* MaskExpression.SYMBOL_STAR */\n      ) === -1 || this._maskValue.indexOf(\"?\"\n      /* MaskExpression.SYMBOL_QUESTION */\n      ) === -1) {\n        // eslint-disable-next-line no-param-reassign\n        value = typeof value === 'number' ? String(value) : value;\n\n        const array = this._maskValue.split('*');\n\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkDropSpecialCharAmount(this._maskValue) - counterOfOpt : this.prefix ? this._maskValue.length + this.prefix.length - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n        if (array.length === 1) {\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n\n        if (array.length > 1) {\n          const lastIndexArray = array[array.length - 1];\n\n          if (lastIndexArray && this._maskService.specialCharacters.includes(lastIndexArray[0]) && String(value).includes(lastIndexArray[0] ?? '') && !this.dropSpecialCharacters) {\n            const special = value.split(lastIndexArray[0]);\n            return special[special.length - 1].length === lastIndexArray.length - 1 ? null : this._createValidationError(value);\n          } else if ((lastIndexArray && !this._maskService.specialCharacters.includes(lastIndexArray[0]) || !lastIndexArray || this._maskService.dropSpecialCharacters) && value.length >= length - 1) {\n            return null;\n          } else {\n            return this._createValidationError(value);\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf(\"*\"\n      /* MaskExpression.SYMBOL_STAR */\n      ) === 1 || this._maskValue.indexOf(\"?\"\n      /* MaskExpression.SYMBOL_QUESTION */\n      ) === 1) {\n        return null;\n      }\n    }\n\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n\n    return null;\n  }\n\n  onPaste() {\n    this._justPasted = true;\n  }\n\n  onFocus() {\n    this._isFocused = true;\n  }\n\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === \"\"\n    /* MaskExpression.EMPTY_STRING */\n    || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      );\n    }\n  }\n\n  onInput(e) {\n    // If IME is composing text, we wait for the composed text.\n    if (this._isComposing) return;\n    const el = e.target;\n\n    const transformedValue = this._maskService.inputTransformFn(el.value);\n\n    if (el.type !== 'number') {\n      if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n        el.value = transformedValue.toString();\n        this._inputValue = el.value;\n\n        this._setMask();\n\n        if (!this._maskValue) {\n          this.onChange(el.value);\n          return;\n        }\n\n        let position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n\n        if (this.showMaskTyped && this.keepCharacterPositions && this._maskService.placeHolderCharacter.length === 1) {\n          const inputSymbol = el.value.slice(position - 1, position);\n          const prefixLength = this.prefix.length;\n\n          const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ?? \"\"\n          /* MaskExpression.EMPTY_STRING */\n          );\n\n          const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ?? \"\"\n          /* MaskExpression.EMPTY_STRING */\n          );\n\n          const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n          const selStart = Number(this._maskService.selStart) - prefixLength ?? '';\n          const selEnd = Number(this._maskService.selEnd) - prefixLength ?? '';\n\n          if (this._code === \"Backspace\"\n          /* MaskExpression.BACKSPACE */\n          ) {\n            if (!selectRangeBackspace) {\n              if (this._maskService.selStart === prefixLength) {\n                this._maskService.actualValue = this.prefix + this._maskService.maskIsShown.slice(0, selEnd) + this._inputValue.split(this.prefix).join('');\n              } else if (this._maskService.selStart === this._maskService.maskIsShown.length + prefixLength) {\n                this._maskService.actualValue = this._inputValue + this._maskService.maskIsShown.slice(selStart, selEnd);\n              } else {\n                this._maskService.actualValue = this.prefix + this._inputValue.split(this.prefix).join('').slice(0, selStart) + this._maskService.maskIsShown.slice(selStart, selEnd) + this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength) + this.suffix;\n              }\n            } else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) && selectRangeBackspace) {\n              if (selStart === 1 && this.prefix) {\n                this._maskService.actualValue = this.prefix + this._maskService.placeHolderCharacter + el.value.split(this.prefix).join('').split(this.suffix).join('') + this.suffix;\n                position = position - 1;\n              } else {\n                const part1 = el.value.substring(0, position);\n                const part2 = el.value.substring(position);\n                this._maskService.actualValue = part1 + this._maskService.placeHolderCharacter + part2;\n              }\n            }\n          }\n\n          if (this._code !== \"Backspace\"\n          /* MaskExpression.BACKSPACE */\n          ) {\n            if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n              position = Number(el.selectionStart) - 1;\n            } else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) && checkSpecialCharacter && !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n              this._maskService.actualValue = el.value.slice(0, position - 1) + el.value.slice(position, position + 1) + inputSymbol + el.value.slice(position + 2);\n              position = position + 1;\n            } else if (checkSymbols) {\n              if (el.value.length === 1 && position === 1) {\n                this._maskService.actualValue = this.prefix + inputSymbol + this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) + this.suffix;\n              } else {\n                this._maskService.actualValue = el.value.slice(0, position - 1) + inputSymbol + el.value.slice(position + 1).split(this.suffix).join('') + this.suffix;\n              }\n            } else if (this.prefix && el.value.length === 1 && position - prefixLength === 1 && this._maskService._checkSymbolMask(el.value, this._maskService.maskExpression[position - 1 - prefixLength] ?? \"\"\n            /* MaskExpression.EMPTY_STRING */\n            )) {\n              this._maskService.actualValue = this.prefix + el.value + this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) + this.suffix;\n            }\n          }\n        }\n\n        let caretShift = 0;\n        let backspaceShift = false;\n\n        if (this._code === \"Delete\"\n        /* MaskExpression.DELETE */\n        && \"separator\"\n        /* MaskExpression.SEPARATOR */\n        ) {\n          this._maskService.deletedSpecialCharacter = true;\n        }\n\n        if (this._inputValue.length >= this._maskService.maskExpression.length - 1 && this._code !== \"Backspace\"\n        /* MaskExpression.BACKSPACE */\n        && this._maskService.maskExpression === \"d0/M0/0000\"\n        /* MaskExpression.DAYS_MONTHS_YEARS */\n        && position < 10) {\n          const inputSymbol = this._inputValue.slice(position - 1, position);\n\n          el.value = this._inputValue.slice(0, position - 1) + inputSymbol + this._inputValue.slice(position + 1);\n        }\n\n        if (this._maskService.maskExpression === \"d0/M0/0000\"\n        /* MaskExpression.DAYS_MONTHS_YEARS */\n        && this.leadZeroDateTime) {\n          if (position < 3 && Number(el.value) > 31 && Number(el.value) < 40 || position === 5 && Number(el.value.slice(3, 5)) > 12) {\n            position = position + 2;\n          }\n        }\n\n        if (this._maskService.maskExpression === \"Hh:m0:s0\"\n        /* MaskExpression.HOURS_MINUTES_SECONDS */\n        && this.apm) {\n          if (this._justPasted && el.value.slice(0, 2) === \"00\"\n          /* MaskExpression.DOUBLE_ZERO */\n          ) {\n            el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n          }\n\n          el.value = el.value === \"00\"\n          /* MaskExpression.DOUBLE_ZERO */\n          ? \"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          : el.value;\n        }\n\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\"\n        /* MaskExpression.BACKSPACE */\n        || this._code === \"Delete\"\n        /* MaskExpression.DELETE */\n        , (shift, _backspaceShift) => {\n          this._justPasted = false;\n          caretShift = shift;\n          backspaceShift = _backspaceShift;\n        }); // only set the selection if the element is active\n\n\n        if (this._getActiveElement() !== el) {\n          return;\n        }\n\n        if (this._maskService.plusOnePosition) {\n          position = position + 1;\n          this._maskService.plusOnePosition = false;\n        } // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n\n\n        if (this._maskExpressionArray.length) {\n          if (this._code === \"Backspace\"\n          /* MaskExpression.BACKSPACE */\n          ) {\n            position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position)) ? position - 1 : position;\n          } else {\n            position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n          }\n        }\n\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === \"Backspace\"\n        /* MaskExpression.BACKSPACE */\n        && !backspaceShift ? 0 : caretShift);\n\n        if (positionToApply > this._getActualInputLength()) {\n          positionToApply = el.value === this._maskService.decimalMarker && el.value.length === 1 ? this._getActualInputLength() + 1 : this._getActualInputLength();\n        }\n\n        if (positionToApply < 0) {\n          positionToApply = 0;\n        }\n\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n      }\n    } else {\n      if (!this._maskValue) {\n        this.onChange(el.value);\n        return;\n      }\n\n      this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\"\n      /* MaskExpression.BACKSPACE */\n      || this._code === \"Delete\"\n      /* MaskExpression.DELETE */\n      );\n    }\n  } // IME starts\n\n\n  onCompositionStart() {\n    this._isComposing = true;\n  } // IME completes\n\n\n  onCompositionEnd(e) {\n    this._isComposing = false;\n    this._justPasted = true;\n    this.onInput(e);\n  }\n\n  onBlur(e) {\n    if (this._maskValue) {\n      const el = e.target;\n\n      if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n        const maskExpression = this._maskService.maskExpression;\n        const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n\n        if (precision > 1) {\n          el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n          const decimalPart = el.value.split(this.decimalMarker)[1];\n          el.value = el.value.includes(this.decimalMarker) ? el.value + \"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          .repeat(precision - decimalPart.length) + this.suffix : el.value + this.decimalMarker + \"0\"\n          /* MaskExpression.NUMBER_ZERO */\n          .repeat(precision) + this.suffix;\n          this._maskService.actualValue = el.value;\n        }\n      }\n\n      this._maskService.clearIfNotMatchFn();\n    }\n\n    this._isFocused = false;\n    this.onTouch();\n  }\n\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n\n    const nextValue = el && (el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n\n\n    if (el && el.type !== 'number' && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n\n\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  } // eslint-disable-next-line complexity\n\n\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    if (this._isComposing) {\n      // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n      if (e.key === 'Enter') this.onCompositionEnd(e);\n      return;\n    }\n\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (el.type !== 'number') {\n      if (e.key === \"ArrowUp\"\n      /* MaskExpression.ARROW_UP */\n      ) {\n        e.preventDefault();\n      }\n\n      if (e.key === \"ArrowLeft\"\n      /* MaskExpression.ARROW_LEFT */\n      || e.key === \"Backspace\"\n      /* MaskExpression.BACKSPACE */\n      || e.key === \"Delete\"\n      /* MaskExpression.DELETE */\n      ) {\n        if (e.key === \"Backspace\"\n        /* MaskExpression.BACKSPACE */\n        && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n\n        if (e.key === \"Backspace\"\n        /* MaskExpression.BACKSPACE */\n        && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, el.selectionEnd);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? \"\"\n              /* MaskExpression.EMPTY_STRING */\n              ).toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n              }\n            }\n          }\n        }\n\n        this.checkSelectionOnDeletion(el);\n\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n\n        const cursorStart = el.selectionStart;\n\n        if (e.key === \"Backspace\"\n        /* MaskExpression.BACKSPACE */\n        && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.code === 'KeyA' && e.ctrlKey || e.code === 'KeyA' && e.metaKey // Cmd + A (Mac)\n      ) {\n        el.setSelectionRange(0, this._getActualInputLength());\n        e.preventDefault();\n      }\n\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n  }\n  /** It writes the value in the input */\n\n\n  writeValue(controlValue) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n        if ('disable' in controlValue) {\n          _this.setDisabledState(Boolean(controlValue.disable));\n        } // eslint-disable-next-line no-param-reassign\n\n\n        controlValue = controlValue.value;\n      }\n\n      if (controlValue !== null) {\n        // eslint-disable-next-line no-param-reassign\n        controlValue = _this.inputTransformFn ? _this.inputTransformFn(controlValue) : controlValue;\n      }\n\n      if (typeof controlValue === 'string' || typeof controlValue === 'number' || controlValue === null || controlValue === undefined) {\n        if (controlValue === null || controlValue === undefined || controlValue === '') {\n          _this._maskService._currentValue = '';\n          _this._maskService._previousValue = '';\n        } // eslint-disable-next-line no-param-reassign\n\n\n        let inputValue = controlValue;\n\n        if (typeof inputValue === 'number' || _this._maskValue.startsWith(\"separator\"\n        /* MaskExpression.SEPARATOR */\n        )) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = String(inputValue);\n\n          const localeDecimalMarker = _this._maskService.currentLocaleDecimalMarker();\n\n          if (!Array.isArray(_this._maskService.decimalMarker)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = _this._maskService.decimalMarker !== localeDecimalMarker ? inputValue.replace(localeDecimalMarker, _this._maskService.decimalMarker) : inputValue;\n          }\n\n          if (_this._maskService.leadZero && inputValue && _this.maskExpression && _this.dropSpecialCharacters !== false) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = _this._maskService._checkPrecision(_this._maskService.maskExpression, inputValue);\n          }\n\n          if (_this._maskService.decimalMarker === \",\"\n          /* MaskExpression.COMMA */\n          ) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.toString().replace(\".\"\n            /* MaskExpression.DOT */\n            , \",\"\n            /* MaskExpression.COMMA */\n            );\n          }\n\n          if (_this.maskExpression?.startsWith(\"separator\"\n          /* MaskExpression.SEPARATOR */\n          ) && _this.leadZero) {\n            requestAnimationFrame(() => {\n              _this._maskService.applyMask(inputValue?.toString() ?? '', _this._maskService.maskExpression);\n            });\n          }\n\n          _this._maskService.isNumberValue = true;\n        }\n\n        if (typeof inputValue !== 'string') {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = '';\n        }\n\n        _this._inputValue = inputValue;\n\n        _this._setMask();\n\n        if (inputValue && _this._maskService.maskExpression || _this._maskService.maskExpression && (_this._maskService.prefix || _this._maskService.showMaskTyped)) {\n          // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n          typeof _this.inputTransformFn !== 'function' ? _this._maskService.writingValue = true : '';\n          _this._maskService.formElementProperty = ['value', _this._maskService.applyMask(inputValue, _this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n          typeof _this.inputTransformFn !== 'function' ? _this._maskService.writingValue = false : '';\n        } else {\n          _this._maskService.formElementProperty = ['value', inputValue];\n        }\n\n        _this._inputValue = inputValue;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n      }\n    })();\n  }\n\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n\n\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _applyMask() {\n    this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split(\"\"\n    /* MaskExpression.EMPTY_STRING */\n    ).filter(s => s !== ':').length;\n\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n\n  _setMask() {\n    this._maskExpressionArray.some(mask => {\n      const specialChart = mask.split(\"\"\n      /* MaskExpression.EMPTY_STRING */\n      ).some(char => this._maskService.specialCharacters.includes(char));\n\n      if (specialChart && this._inputValue && !mask.includes(\"S\"\n      /* MaskExpression.LETTER_S */\n      ) || mask.includes(\"{\"\n      /* MaskExpression.CURLY_BRACKETS_LEFT */\n      )) {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n\n        if (test) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask.includes(\"{\"\n          /* MaskExpression.CURLY_BRACKETS_LEFT */\n          ) ? this._maskService._repeatPatternSymbols(mask) : mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? \"\"\n          /* MaskExpression.EMPTY_STRING */\n          ;\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression.includes(\"{\"\n          /* MaskExpression.CURLY_BRACKETS_LEFT */\n          ) ? this._maskService._repeatPatternSymbols(expression) : expression;\n        }\n      } else {\n        const check = this._maskService.removeMask(this._inputValue)?.split(\"\"\n        /* MaskExpression.EMPTY_STRING */\n        ).every((character, index) => {\n          const indexMask = mask.charAt(index);\n          return this._maskService._checkSymbolMask(character, indexMask);\n        });\n\n        if (check) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n          return check;\n        }\n      }\n    });\n  }\n\n}\n\nNgxMaskDirective.ɵfac = function NgxMaskDirective_Factory(t) {\n  return new (t || NgxMaskDirective)();\n};\n\nNgxMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function NgxMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function NgxMaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"focus\", function NgxMaskDirective_focus_HostBindingHandler($event) {\n        return ctx.onFocus($event);\n      })(\"ngModelChange\", function NgxMaskDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onModelChange($event);\n      })(\"input\", function NgxMaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"compositionstart\", function NgxMaskDirective_compositionstart_HostBindingHandler($event) {\n        return ctx.onCompositionStart($event);\n      })(\"compositionend\", function NgxMaskDirective_compositionend_HostBindingHandler($event) {\n        return ctx.onCompositionEnd($event);\n      })(\"blur\", function NgxMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.onBlur($event);\n      })(\"click\", function NgxMaskDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function NgxMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    leadZero: \"leadZero\",\n    triggerOnMaskChange: \"triggerOnMaskChange\",\n    apm: \"apm\",\n    inputTransformFn: \"inputTransformFn\",\n    outputTransformFn: \"outputTransformFn\",\n    keepCharacterPositions: \"keepCharacterPositions\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  exportAs: [\"mask\", \"ngxMask\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxMaskDirective),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NgxMaskDirective),\n    multi: true\n  }, NgxMaskService]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxMaskDirective),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => NgxMaskDirective),\n        multi: true\n      }, NgxMaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], null, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    leadZero: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    apm: [{\n      type: Input\n    }],\n    inputTransformFn: [{\n      type: Input\n    }],\n    outputTransformFn: [{\n      type: Input\n    }],\n    keepCharacterPositions: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focus', ['$event']]\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onCompositionStart: [{\n      type: HostListener,\n      args: ['compositionstart', ['$event']]\n    }],\n    onCompositionEnd: [{\n      type: HostListener,\n      args: ['compositionend', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur', ['$event']]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass NgxMaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n    this.defaultOptions = {};\n    this._maskExpressionArray = [];\n    this.mask = '';\n  }\n\n  transform(value, mask, {\n    patterns,\n    ...config\n  } = {}) {\n    const currentConfig = {\n      maskExpression: mask,\n      ...this.defaultOptions,\n      ...config,\n      patterns: { ...this._maskService.patterns,\n        ...patterns\n      }\n    };\n    Object.entries(currentConfig).forEach(([key, value]) => {\n      //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n      this._maskService[key] = value;\n    });\n\n    if (mask.includes('||')) {\n      if (mask.split('||').length > 1) {\n        this._maskExpressionArray = mask.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n\n        this._setMask(value);\n\n        return this._maskService.applyMask(`${value}`, this.mask);\n      } else {\n        this._maskExpressionArray = [];\n        return this._maskService.applyMask(`${value}`, this.mask);\n      }\n    }\n\n    if (mask.includes(\"{\"\n    /* MaskExpression.CURLY_BRACKETS_LEFT */\n    )) {\n      return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n    }\n\n    if (mask.startsWith(\"separator\"\n    /* MaskExpression.SEPARATOR */\n    )) {\n      if (config.decimalMarker) {\n        this._maskService.decimalMarker = config.decimalMarker;\n      }\n\n      if (config.thousandSeparator) {\n        this._maskService.thousandSeparator = config.thousandSeparator;\n      }\n\n      if (config.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        this._maskService.leadZero = config.leadZero;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      value = String(value);\n\n      const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n\n      if (!Array.isArray(this._maskService.decimalMarker)) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService.decimalMarker !== localeDecimalMarker ? value.replace(localeDecimalMarker, this._maskService.decimalMarker) : value;\n      }\n\n      if (this._maskService.leadZero && value && this._maskService.dropSpecialCharacters !== false) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService._checkPrecision(mask, value);\n      }\n\n      if (this._maskService.decimalMarker === \",\"\n      /* MaskExpression.COMMA */\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        value = value.toString().replace(\".\"\n        /* MaskExpression.DOT */\n        , \",\"\n        /* MaskExpression.COMMA */\n        );\n      }\n\n      this._maskService.isNumberValue = true;\n    }\n\n    if (value === null || value === undefined) {\n      return this._maskService.applyMask('', mask);\n    }\n\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n\n  _setMask(value) {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(value)?.length <= this._maskService.removeMask(mask)?.length;\n\n        if (value && test) {\n          this.mask = mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? \"\"\n          /* MaskExpression.EMPTY_STRING */\n          ;\n          this.mask = expression;\n        }\n      });\n    }\n  }\n\n}\n\nNgxMaskPipe.ɵfac = function NgxMaskPipe_Factory(t) {\n  return new (t || NgxMaskPipe)(i0.ɵɵdirectiveInject(NgxMaskService, 16));\n};\n\nNgxMaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: NgxMaskPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: NgxMaskService\n    }];\n  }, null);\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? { ...initConfig,\n    ...configValue()\n  } : { ...initConfig,\n    ...configValue\n  };\n}\n\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: NGX_MASK_CONFIG,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, NgxMaskService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n\n}\n\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n  return new (t || NgxMaskModule)();\n};\n\nNgxMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NgxMaskDirective, NgxMaskPipe],\n      declarations: [NgxMaskDirective, NgxMaskPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskModule, NgxMaskPipe, NgxMaskService, _configFactory, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","inject","Injectable","ElementRef","Renderer2","forwardRef","Directive","Input","Output","HostListener","Pipe","NgModule","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","apm","leadZero","keepCharacterPositions","triggerOnMaskChange","inputTransformFn","value","outputTransformFn","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","NgxMaskApplierService","constructor","_config","_shift","Set","plusOnePosition","maskExpression","actualValue","showKeepCharacterExp","deletedSpecialCharacter","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","sanitizedStr","Number","isNaN","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","_splitPercentZero","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","symbolStarInPattern","_checkSymbolMask","_shiftStep","daysCount","inputValueCursor","inputValueCursorPlusOne","inputValueCursorPlusTwo","inputValueCursorMinusOne","inputValueCursorMinusTwo","inputValueCursorMinusThree","inputValueSliceMinusThreeMinusOne","inputValueSliceMinusOnePlusOne","inputValueSliceCursorPlusTwo","inputValueSliceMinusTwoCursor","maskStartWithMonth","startWithMonthInput","monthsCount","withoutDays","specialChart","day1monthInput","day2monthInput","day2monthInputDot","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","_findDropSpecialChar","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","comparedValue","excludedValue","some","index","decimalIndex","parsedValue","parseInt","integerPart","decimalPart","integerString","decimal","ɵfac","ɵprov","type","NgxMaskService","arguments","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","_maskExpressionArray","_previousValue","_currentValue","_emitValue","onChange","_","_elementRef","document","_renderer","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkDropSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_checkPatternForSpace","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","key","hasOwnProperty","patternString","maskExpretion","matcher","separatorExpression","toFixed","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","symbols","currentLocaleDecimalMarker","NgxMaskDirective","_maskValue","_position","_justPasted","_isFocused","_isComposing","_maskService","self","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","requestAnimationFrame","click","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","lastIndexOf","opt","array","lastIndexArray","special","emit","onPaste","onFocus","onModelChange","onInput","e","el","target","transformedValue","_inputValue","selectionStart","prefixLength","checkSymbols","checkSpecialCharacter","selectRangeBackspace","_code","part1","part2","caretShift","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","console","warn","onCompositionStart","onCompositionEnd","onBlur","repeat","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","controlValue","setDisabledState","disable","localeDecimalMarker","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","rowMaskLen","requiredMask","expression","check","character","indexMask","charAt","ɵdir","provide","useExisting","args","selector","providers","exportAs","NgxMaskPipe","defaultOptions","transform","config","currentConfig","Object","entries","forEach","ɵpipe","pure","_configFactory","initConfig","configValue","Function","NgxMaskModule","forRoot","ngModule","useValue","useFactory","deps","forChild","ɵmod","ɵinj","exports","declarations"],"sources":["/home/maustem/development/angular/Silycon-Store/node_modules/ngx-mask/fesm2020/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    apm: false,\n    leadZero: false,\n    keepCharacterPositions: false,\n    triggerOnMaskChange: false,\n    inputTransformFn: (value) => value,\n    outputTransformFn: (value) => value,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = [\n    \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */,\n    \"Hh:m0\" /* MaskExpression.HOURS_MINUTES */,\n    \"m0:s0\" /* MaskExpression.MINUTES_SECONDS */,\n];\nconst withoutValidation = [\n    \"percent\" /* MaskExpression.PERCENT */,\n    \"Hh\" /* MaskExpression.HOURS_HOUR */,\n    \"s0\" /* MaskExpression.SECONDS */,\n    \"m0\" /* MaskExpression.MINUTES */,\n    \"separator\" /* MaskExpression.SEPARATOR */,\n    \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */,\n    \"d0/M0\" /* MaskExpression.DAYS_MONTHS */,\n    \"d0\" /* MaskExpression.DAYS */,\n    \"M0\" /* MaskExpression.MONTHS */,\n];\n\nclass NgxMaskApplierService {\n    constructor() {\n        this._config = inject(NGX_MASK_CONFIG);\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.hiddenInput = this._config.hiddenInput;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.specialCharacters = this._config.specialCharacters;\n        this.patterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n        this.leadZero = this._config.leadZero;\n        this.apm = this._config.apm;\n        this.inputTransformFn = this._config.inputTransformFn;\n        this.outputTransformFn = this._config.outputTransformFn;\n        this.keepCharacterPositions = this._config.keepCharacterPositions;\n        this._shift = new Set();\n        this.plusOnePosition = false;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.showKeepCharacterExp = '';\n        this.shownMaskExpression = '';\n        this.deletedSpecialCharacter = false;\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* MaskExpression.EMPTY_STRING */;\n            let res = x[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* MaskExpression.EMPTY_STRING */);\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === \"-\" /* MaskExpression.MINUS */) {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            const sanitizedStr = str.replace(',', '.');\n            const value = Number(sanitizedStr);\n            return !isNaN(value) && value >= 0 && value <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split(\".\" /* MaskExpression.DOT */);\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    i !== this.suffix?.length - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, \"\" /* MaskExpression.EMPTY_STRING */);\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return \"\" /* MaskExpression.EMPTY_STRING */;\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        if (inputValue === '(' && this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        const inputArray = inputValue.toString().split(\"\" /* MaskExpression.EMPTY_STRING */);\n        if (this.allowNegativeNumbers &&\n            inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */) {\n            // eslint-disable-next-line no-param-reassign\n            result += inputValue.slice(cursor, cursor + 1);\n        }\n        if (maskExpression === \"IP\" /* MaskExpression.IP */) {\n            const valuesIP = inputValue.split(\".\" /* MaskExpression.DOT */);\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n            }\n        }\n        if (maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                (inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n            if (inputValue.indexOf(decimalMarker) > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n                let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n                if (this.allowNegativeNumbers &&\n                    inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ &&\n                    !backspaced) {\n                    base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n            }\n            let value = '';\n            this.allowNegativeNumbers &&\n                inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */\n                ? (value = inputValue.slice(cursor + 1, cursor + inputValue.length))\n                : (value = inputValue);\n            if (this.percentage(value)) {\n                result = this._splitPercentZero(inputValue);\n            }\n            else {\n                result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n            }\n        }\n        else if (maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            const precision = this.getPrecision(maskExpression);\n            const decimalMarker = Array.isArray(this.decimalMarker)\n                ? \".\" /* MaskExpression.DOT */\n                : this.decimalMarker;\n            if (precision === 0) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.allowNegativeNumbers\n                    ? inputValue.length > 2 &&\n                        inputValue[0] === \"-\" /* MaskExpression.MINUS */ &&\n                        inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                        inputValue[2] !== this.thousandSeparator &&\n                        inputValue[2] !== \",\" /* MaskExpression.COMMA */ &&\n                        inputValue[2] !== \".\" /* MaskExpression.DOT */\n                        ? '-' + inputValue.slice(2, inputValue.length)\n                        : inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                            inputValue.length > 1 &&\n                            inputValue[1] !== this.thousandSeparator &&\n                            inputValue[1] !== \",\" /* MaskExpression.COMMA */ &&\n                            inputValue[1] !== \".\" /* MaskExpression.DOT */\n                            ? inputValue.slice(1, inputValue.length)\n                            : inputValue\n                    : inputValue.length > 1 &&\n                        inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                        inputValue[1] !== this.thousandSeparator &&\n                        inputValue[1] !== \",\" /* MaskExpression.COMMA */ &&\n                        inputValue[1] !== \".\" /* MaskExpression.DOT */\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                if (inputValue[0] === decimalMarker && inputValue.length > 1) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        \"0\" /* MaskExpression.NUMBER_ZERO */ + inputValue.slice(0, inputValue.length + 1);\n                    this.plusOnePosition = true;\n                }\n                if (inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                    inputValue[1] !== decimalMarker &&\n                    inputValue[1] !== this.thousandSeparator) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        inputValue.length > 1\n                            ? inputValue.slice(0, 1) +\n                                decimalMarker +\n                                inputValue.slice(1, inputValue.length + 1)\n                            : inputValue;\n                    this.plusOnePosition = true;\n                }\n                if (this.allowNegativeNumbers &&\n                    inputValue[0] === \"-\" /* MaskExpression.MINUS */ &&\n                    (inputValue[1] === decimalMarker ||\n                        inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        inputValue[1] === decimalMarker && inputValue.length > 2\n                            ? inputValue.slice(0, 1) +\n                                \"0\" /* MaskExpression.NUMBER_ZERO */ +\n                                inputValue.slice(1, inputValue.length)\n                            : inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                                inputValue.length > 2 &&\n                                inputValue[2] !== decimalMarker\n                                ? inputValue.slice(0, 2) +\n                                    decimalMarker +\n                                    inputValue.slice(2, inputValue.length)\n                                : inputValue;\n                    this.plusOnePosition = true;\n                }\n            }\n            if (backspaced) {\n                if (inputValue[0] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                    inputValue[1] === this.decimalMarker &&\n                    (inputValue[position] === \"0\" /* MaskExpression.NUMBER_ZERO */ ||\n                        inputValue[position] === this.decimalMarker)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.slice(2, inputValue.length);\n                }\n                if (inputValue[0] === \"-\" /* MaskExpression.MINUS */ &&\n                    inputValue[1] === \"0\" /* MaskExpression.NUMBER_ZERO */ &&\n                    inputValue[2] === this.decimalMarker &&\n                    (inputValue[position] === \"0\" /* MaskExpression.NUMBER_ZERO */ ||\n                        inputValue[position] === this.decimalMarker)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = \"-\" /* MaskExpression.MINUS */ + inputValue.slice(3, inputValue.length);\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* MaskExpression.EMPTY_STRING */);\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(\",\" /* MaskExpression.COMMA */) - inputValue.indexOf(\",\" /* MaskExpression.COMMA */);\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if (result[position - 1] === this.decimalMarker ||\n                shiftStep === -4 ||\n                shiftStep === -3 ||\n                result[position] === \",\" /* MaskExpression.COMMA */) {\n                this._shift.clear();\n                this._shift.add(position - 1);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(\",\" /* MaskExpression.COMMA */) >= position && position > 3)) ||\n                (!(result.indexOf(\".\" /* MaskExpression.DOT */) >= position && position > 3) &&\n                    shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\" /* MaskExpression.EMPTY_STRING */) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                const symbolStarInPattern = \"*\" /* MaskExpression.SYMBOL_STAR */ in this.patterns;\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */) {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    !symbolStarInPattern) {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    if (maskExpression[cursor] === \"H\" /* MaskExpression.HOURS */) {\n                        if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"h\" /* MaskExpression.HOUR */) {\n                        if (this.apm\n                            ? (result.length === 1 && Number(result) > 1) ||\n                                (result === '1' && Number(inputSymbol) > 2) ||\n                                (inputValue.slice(cursor - 1, cursor).length === 1 &&\n                                    Number(inputValue.slice(cursor - 1, cursor)) > 2) ||\n                                (inputValue.slice(cursor - 1, cursor) === '1' &&\n                                    Number(inputSymbol) > 2)\n                            : (result === '2' && Number(inputSymbol) > 3) ||\n                                ((result.slice(cursor - 2, cursor) === '2' ||\n                                    result.slice(cursor - 3, cursor) === '2' ||\n                                    result.slice(cursor - 4, cursor) === '2' ||\n                                    result.slice(cursor - 1, cursor) === '2') &&\n                                    Number(inputSymbol) > 3 &&\n                                    cursor > 10)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"m\" /* MaskExpression.MINUTE */ ||\n                        maskExpression[cursor] === \"s\" /* MaskExpression.SECOND */) {\n                        if (Number(inputSymbol) > 5) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    const inputValueCursor = inputValue[cursor];\n                    const inputValueCursorPlusOne = inputValue[cursor + 1];\n                    const inputValueCursorPlusTwo = inputValue[cursor + 2];\n                    const inputValueCursorMinusOne = inputValue[cursor - 1];\n                    const inputValueCursorMinusTwo = inputValue[cursor - 2];\n                    const inputValueCursorMinusThree = inputValue[cursor - 3];\n                    const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n                    const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n                    const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n                    const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n                    if (maskExpression[cursor] === \"d\" /* MaskExpression.DAY */) {\n                        const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */;\n                        const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */ &&\n                            this.specialCharacters.includes(inputValueCursorMinusTwo);\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            (!maskStartWithMonth &&\n                                (Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) ||\n                            (startWithMonthInput\n                                ? Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    (!this.specialCharacters.includes(inputValueCursor) &&\n                                        this.specialCharacters.includes(inputValueCursorPlusTwo)) ||\n                                    this.specialCharacters.includes(inputValueCursor)\n                                : Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"M\" /* MaskExpression.MONTH */) {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // day<10 && month<12 for input\n                        const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n                        const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) &&\n                            ((this.specialCharacters.includes(inputValueCursorMinusTwo) &&\n                                Number(inputValueSliceMinusOnePlusOne) > monthsCount &&\n                                !this.specialCharacters.includes(inputValueCursor)) ||\n                                this.specialCharacters.includes(inputValueCursor) ||\n                                (this.specialCharacters.includes(inputValueCursorMinusThree) &&\n                                    Number(inputValueSliceMinusTwoCursor) > monthsCount &&\n                                    !this.specialCharacters.includes(inputValueCursorMinusOne)) ||\n                                this.specialCharacters.includes(inputValueCursorMinusOne));\n                        //  month<12 && day<10 for input\n                        const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            (Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // cursor === 5 && without days\n                        const day2monthInputDot = (Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5) ||\n                            (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                cursor === 5);\n                        // // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) &&\n                            Number(inputValueSliceMinusTwoCursor) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthPaste ||\n                            day1monthPaste ||\n                            day2monthInput ||\n                            (day2monthInputDot && !this.leadZeroDateTime)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if ((inputSymbol === \" \" /* MaskExpression.WHITE_SPACE */ &&\n                    maskExpression[cursor] === \" \" /* MaskExpression.WHITE_SPACE */) ||\n                    (inputSymbol === \"/\" /* MaskExpression.SLASH */ &&\n                        maskExpression[cursor] === \"/\" /* MaskExpression.SLASH */)) {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (maskExpression[cursor] === \"9\" /* MaskExpression.NUMBER_NINE */ &&\n                    this.showMaskTyped) {\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                }\n                else if (this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\n                    this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/) &&\n                        !this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]\n                            ?.optional) {\n                        result += inputArray[cursor];\n                    }\n                    if (maskExpression.includes(\"9\" /* MaskExpression.NUMBER_NINE */ + \"*\" /* MaskExpression.SYMBOL_STAR */) &&\n                        maskExpression.includes(\"0\" /* MaskExpression.NUMBER_ZERO */ + \"*\" /* MaskExpression.SYMBOL_STAR */)) {\n                        cursor++;\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter &&\n                    this.placeHolderCharacter.length === 1) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? \"\" /* MaskExpression.EMPTY_STRING */ : result}${this.showMaskTyped ? '' : this.suffix}`;\n        if (result.length === 0) {\n            res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n        }\n        if (result.includes(\"-\" /* MaskExpression.MINUS */) && this.prefix && this.allowNegativeNumbers) {\n            if (backspaced && result === \"-\" /* MaskExpression.MINUS */) {\n                return '';\n            }\n            res = `${\"-\" /* MaskExpression.MINUS */}${this.prefix}${result\n                .split(\"-\" /* MaskExpression.MINUS */)\n                .join(\"\" /* MaskExpression.EMPTY_STRING */)}${this.suffix}`;\n        }\n        return res;\n    }\n    _findDropSpecialChar(inputSymbol) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            return this.dropSpecialCharacters.find((val) => val === inputSymbol);\n        }\n        return this._findSpecialChar(inputSymbol);\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.specialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\n        return ((this.patterns[maskSymbol]?.pattern &&\n            this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ??\n            false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === \"-\" /* MaskExpression.MINUS */ && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value) > 255;\n                }\n                return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n    _splitPercentZero(value) {\n        const decimalIndex = typeof this.decimalMarker === 'string'\n            ? value.indexOf(this.decimalMarker)\n            : value.indexOf(\".\" /* MaskExpression.DOT */);\n        if (decimalIndex === -1) {\n            const parsedValue = parseInt(value, 10);\n            return isNaN(parsedValue) ? \"\" /* MaskExpression.EMPTY_STRING */ : parsedValue.toString();\n        }\n        else {\n            const integerPart = parseInt(value.substring(0, decimalIndex), 10);\n            const decimalPart = value.substring(decimalIndex + 1);\n            const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n            const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n            return integerString === \"\" /* MaskExpression.EMPTY_STRING */\n                ? \"\" /* MaskExpression.EMPTY_STRING */\n                : integerString + decimal + decimalPart;\n        }\n    }\n}\nNgxMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskApplierService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\n            type: Injectable\n        }] });\n\nclass NgxMaskService extends NgxMaskApplierService {\n    constructor() {\n        super(...arguments);\n        this.isNumberValue = false;\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this._maskExpressionArray = [];\n        this.triggerOnMaskChange = false;\n        this._previousValue = '';\n        this._currentValue = '';\n        this._emitValue = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        this._elementRef = inject(ElementRef, { optional: true });\n        this.document = inject(DOCUMENT);\n        this._config = inject(NGX_MASK_CONFIG);\n        this._renderer = inject(Renderer2, { optional: true });\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped\n            ? this.showMaskInInput()\n            : \"\" /* MaskExpression.EMPTY_STRING */;\n        if (this.maskExpression === \"IP\" /* MaskExpression.IP */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n        }\n        if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown + this.suffix;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? inputValue[this.selStart] ?? \"\" /* MaskExpression.EMPTY_STRING */\n            : \"\" /* MaskExpression.EMPTY_STRING */;\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = inputValue && inputValue.length === 1\n                ? inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */)\n                : this.actualValue.split(\"\" /* MaskExpression.EMPTY_STRING */);\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n                this.selStart = Number(this.selStart);\n                this.selEnd = Number(this.selEnd);\n            }\n            else {\n                inputValue !== \"\" /* MaskExpression.EMPTY_STRING */ && actualResult.length\n                    ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                        ? inputValue.length > actualResult.length\n                            ? actualResult.splice(this.selStart, 0, getSymbol)\n                            : inputValue.length < actualResult.length\n                                ? actualResult.length - inputValue.length === 1\n                                    ? backspaced\n                                        ? actualResult.splice(this.selStart - 1, 1)\n                                        : actualResult.splice(inputValue.length - 1, 1)\n                                    : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                                : null\n                        : null\n                    : (actualResult = []);\n            }\n            if (this.showMaskTyped) {\n                if (!this.hiddenInput) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = this.removeMask(inputValue);\n                }\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(\"\" /* MaskExpression.EMPTY_STRING */))\n                    : inputValue;\n        }\n        if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n            newInputValue = inputValue;\n        }\n        if (backspaced &&\n            this.specialCharacters.indexOf(this.maskExpression[position] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1 &&\n            this.showMaskTyped) {\n            newInputValue = this._currentValue;\n        }\n        if (this.deletedSpecialCharacter && position) {\n            if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n                // eslint-disable-next-line no-param-reassign\n                position = position + 1;\n            }\n            else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MaskExpression.MONTHS */) {\n                // eslint-disable-next-line no-param-reassign\n                position = position - 2;\n            }\n            // eslint-disable-next-line no-param-reassign\n            this.deletedSpecialCharacter = false;\n        }\n        if (this.showMaskTyped &&\n            this.placeHolderCharacter.length === 1 &&\n            !this.leadZeroDateTime) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        if (this.maskChanged) {\n            newInputValue = inputValue;\n        }\n        else {\n            newInputValue =\n                Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        }\n        if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted) {\n            const value = this.dropSpecialCharacters\n                ? this.removeMask(this.actualValue)\n                : this.actualValue;\n            this.formControlResult(value);\n            return this.actualValue\n                ? this.actualValue\n                : this.prefix + this.maskIsShown + this.suffix;\n        }\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === \".\" /* MaskExpression.DOT */ &&\n            this.decimalMarker === \".\" /* MaskExpression.DOT */) {\n            this.decimalMarker = \",\" /* MaskExpression.COMMA */;\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n            this.dropSpecialCharacters === true) {\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        if (result || result === '') {\n            this._previousValue = this._currentValue;\n            this._currentValue = result;\n            this._emitValue =\n                this._previousValue !== this._currentValue ||\n                    this.maskChanged ||\n                    (this._previousValue === this._currentValue && justPasted);\n        }\n        this._emitValue ? this.formControlResult(result) : '';\n        if (!this.showMaskTyped || (this.showMaskTyped && this.hiddenInput)) {\n            if (this.hiddenInput) {\n                if (backspaced) {\n                    return this.hideInput(result, this.maskExpression);\n                }\n                return (this.hideInput(result, this.maskExpression) +\n                    this.maskIsShown.slice(result.length));\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown + this.suffix;\n        if (this.maskExpression.includes(\"H\" /* MaskExpression.HOURS */)) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === \"IP\" /* MaskExpression.IP */ ||\n            this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .map((curr, index) => {\n            if (this.patterns &&\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol) {\n                return this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]\n                    ?.symbol;\n            }\n            return curr;\n        })\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((symbol, i) => {\n            const maskChar = this.maskExpression[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join(\"\" /* MaskExpression.EMPTY_STRING */) === res) {\n            return compare.join(\"\" /* MaskExpression.EMPTY_STRING */);\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .map((currSymbol, index) => {\n                if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = \"\" /* MaskExpression.EMPTY_STRING */;\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if ((!value && value !== 0) ||\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n                (this.leadZero || !this.dropSpecialCharacters)) ||\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n                this.separatorLimit.length > 14 &&\n                String(value).length > 14)) {\n            return String(value);\n        }\n        return Number(value)\n            .toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        })\n            .replace(`/${\"-\" /* MaskExpression.MINUS */}/`, \"-\" /* MaskExpression.MINUS */);\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === \"IP\" /* MaskExpression.IP */) {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            if (this.placeHolderCharacter.length === this.maskExpression.length) {\n                return this.placeHolderCharacter;\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(this.placeHolderCharacter, \"\" /* MaskExpression.EMPTY_STRING */)\n                    .length) {\n            this.formElementProperty = ['value', \"\" /* MaskExpression.EMPTY_STRING */];\n            this.applyMask('', this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        if (!this._renderer || !this._elementRef) {\n            return;\n        }\n        Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n    }\n    checkDropSpecialCharAmount(mask) {\n        const chars = mask\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((item) => this._findDropSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged\n                ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))))\n                : '';\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n        }\n        else if (this.dropSpecialCharacters ||\n            (!this.dropSpecialCharacters && this.prefix === inputValue)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n        }\n        else {\n            this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === \"\" /* MaskExpression.EMPTY_STRING */) {\n            return value;\n        }\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n            (this.leadZero || !this.dropSpecialCharacters)) {\n            return value;\n        }\n        if (String(value).length > 16 && this.separatorLimit.length > 14) {\n            return String(value);\n        }\n        const num = Number(value);\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && Number.isNaN(num)) {\n            const val = String(value).replace(',', '.');\n            return Number(val);\n        }\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\n            value.includes(\".\" /* MaskExpression.DOT */)) {\n            return value;\n        }\n        return value\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* MaskExpression.EMPTY_STRING */)\n            : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n    }\n    _retrieveSeparatorValue(result) {\n        let specialCharacters = Array.isArray(this.dropSpecialCharacters)\n            ? this.specialCharacters.filter((v) => {\n                return this.dropSpecialCharacters.includes(v);\n            })\n            : this.specialCharacters;\n        if (!this.deletedSpecialCharacter &&\n            this._checkPatternForSpace() &&\n            result.includes(\" \" /* MaskExpression.WHITE_SPACE */) &&\n            this.maskExpression.includes(\"*\" /* MaskExpression.SYMBOL_STAR */)) {\n            specialCharacters = specialCharacters.filter((char) => char !== \" \" /* MaskExpression.WHITE_SPACE */);\n        }\n        return this._removeMask(result, specialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), \".\" /* MaskExpression.DOT */);\n    }\n    _checkSymbols(result) {\n        if (result === \"\" /* MaskExpression.EMPTY_STRING */) {\n            return result;\n        }\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\n            this.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n            // eslint-disable-next-line no-param-reassign\n            result = result.replace(\",\" /* MaskExpression.COMMA */, \".\" /* MaskExpression.DOT */);\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            if (this.separatorLimit.length > 14) {\n                return String(separatorValue);\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    _checkPatternForSpace() {\n        for (const key in this.patterns) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\n                const patternString = this.patterns[key]?.pattern.toString();\n                const pattern = this.patterns[key]?.pattern;\n                if (patternString?.includes(\" \" /* MaskExpression.WHITE_SPACE */) &&\n                    pattern?.test(this.maskExpression)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        const separatorPrecision = separatorExpression.slice(10, 11);\n        if (separatorExpression.indexOf('2') > 0 ||\n            (this.leadZero && Number(separatorPrecision) > 1)) {\n            if (this.decimalMarker === \",\" /* MaskExpression.COMMA */ && this.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                separatorValue = separatorValue.replace(',', '.');\n            }\n            return this.leadZero\n                ? Number(separatorValue).toFixed(Number(separatorPrecision))\n                : Number(separatorValue).toFixed(2);\n        }\n        return this.numberToString(separatorValue);\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .reduce((accum, currVal, index) => {\n                this._start =\n                    currVal === \"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */ ? index : this._start;\n                if (currVal !== \"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */) {\n                    return this._findSpecialChar(currVal) ? accum + currVal : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                if (maskExp.slice(0, this._start).length > 1 &&\n                    maskExp.includes(\"S\" /* MaskExpression.LETTER_S */)) {\n                    const symbols = maskExp.slice(0, this._start - 1);\n                    return symbols.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                        ? accum + replaceWith\n                        : symbols + accum + replaceWith;\n                }\n                else {\n                    return accum + replaceWith;\n                }\n            }, '')) ||\n            maskExp);\n    }\n    currentLocaleDecimalMarker() {\n        return (1.1).toLocaleString().substring(1, 2);\n    }\n}\nNgxMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nNgxMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskService, decorators: [{\n            type: Injectable\n        }] });\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nclass NgxMaskDirective {\n    constructor() {\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.leadZero = null;\n        this.triggerOnMaskChange = null;\n        this.apm = null;\n        this.inputTransformFn = null;\n        this.outputTransformFn = null;\n        this.keepCharacterPositions = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this._isFocused = false;\n        /**For IME composition event */\n        this._isComposing = false;\n        this.document = inject(DOCUMENT);\n        this._maskService = inject(NgxMaskService, { self: true });\n        this._config = inject(NGX_MASK_CONFIG);\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, leadZero, triggerOnMaskChange, apm, inputTransformFn, outputTransformFn, keepCharacterPositions, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue &&\n                maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split(\"||\" /* MaskExpression.OR */)\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || \"\" /* MaskExpression.EMPTY_STRING */;\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.specialCharacters = this._maskService.specialCharacters.filter((c) => c !== \"-\" /* MaskExpression.MINUS */);\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.patterns = patterns.currentValue;\n        }\n        if (apm && apm.currentValue) {\n            this._maskService.apm = apm.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n            if (showMaskTyped.previousValue === false &&\n                showMaskTyped.currentValue === true &&\n                this._isFocused) {\n                requestAnimationFrame(() => {\n                    this._maskService._elementRef?.nativeElement.click();\n                });\n            }\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (leadZero) {\n            this._maskService.leadZero = leadZero.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        if (inputTransformFn) {\n            this._maskService.inputTransformFn = inputTransformFn.currentValue;\n        }\n        if (outputTransformFn) {\n            this._maskService.outputTransformFn = outputTransformFn.currentValue;\n        }\n        if (keepCharacterPositions) {\n            this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            if (this._maskValue.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n                return null;\n            }\n            for (const key in this._maskService.patterns) {\n                if (this._maskService.patterns[key]?.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                            .filter((i) => i === key)\n                            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1 &&\n                value.toString().length ===\n                    this._maskValue.length +\n                        Number((this._maskValue.split(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)[1] ??\n                            \"\" /* MaskExpression.EMPTY_STRING */).split(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */)[0]) -\n                        4) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) > 1 &&\n                value.toString().length <\n                    this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */)) ||\n                (this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) > 1 &&\n                    value.toString().length <\n                        this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */)) ||\n                this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === -1 ||\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === -1) {\n                // eslint-disable-next-line no-param-reassign\n                value = typeof value === 'number' ? String(value) : value;\n                const array = this._maskValue.split('*');\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkDropSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this.prefix\n                        ? this._maskValue.length + this.prefix.length - counterOfOpt\n                        : this._maskValue.length - counterOfOpt;\n                if (array.length === 1) {\n                    if (value.toString().length < length) {\n                        return this._createValidationError(value);\n                    }\n                }\n                if (array.length > 1) {\n                    const lastIndexArray = array[array.length - 1];\n                    if (lastIndexArray &&\n                        this._maskService.specialCharacters.includes(lastIndexArray[0]) &&\n                        String(value).includes(lastIndexArray[0] ?? '') &&\n                        !this.dropSpecialCharacters) {\n                        const special = value.split(lastIndexArray[0]);\n                        return special[special.length - 1].length === lastIndexArray.length - 1\n                            ? null\n                            : this._createValidationError(value);\n                    }\n                    else if (((lastIndexArray &&\n                        !this._maskService.specialCharacters.includes(lastIndexArray[0])) ||\n                        !lastIndexArray ||\n                        this._maskService.dropSpecialCharacters) &&\n                        value.length >= length - 1) {\n                        return null;\n                    }\n                    else {\n                        return this._createValidationError(value);\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === 1 ||\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === 1) {\n                return null;\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onFocus() {\n        this._isFocused = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === \"\" /* MaskExpression.EMPTY_STRING */ || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue(\"\" /* MaskExpression.EMPTY_STRING */);\n        }\n    }\n    onInput(e) {\n        // If IME is composing text, we wait for the composed text.\n        if (this._isComposing)\n            return;\n        const el = e.target;\n        const transformedValue = this._maskService.inputTransformFn(el.value);\n        if (el.type !== 'number') {\n            if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n                el.value = transformedValue.toString();\n                this._inputValue = el.value;\n                this._setMask();\n                if (!this._maskValue) {\n                    this.onChange(el.value);\n                    return;\n                }\n                let position = el.selectionStart === 1\n                    ? el.selectionStart + this._maskService.prefix.length\n                    : el.selectionStart;\n                if (this.showMaskTyped &&\n                    this.keepCharacterPositions &&\n                    this._maskService.placeHolderCharacter.length === 1) {\n                    const inputSymbol = el.value.slice(position - 1, position);\n                    const prefixLength = this.prefix.length;\n                    const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */);\n                    const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */);\n                    const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n                    const selStart = Number(this._maskService.selStart) - prefixLength ?? '';\n                    const selEnd = Number(this._maskService.selEnd) - prefixLength ?? '';\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        if (!selectRangeBackspace) {\n                            if (this._maskService.selStart === prefixLength) {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        this._maskService.maskIsShown.slice(0, selEnd) +\n                                        this._inputValue.split(this.prefix).join('');\n                            }\n                            else if (this._maskService.selStart ===\n                                this._maskService.maskIsShown.length + prefixLength) {\n                                this._maskService.actualValue =\n                                    this._inputValue +\n                                        this._maskService.maskIsShown.slice(selStart, selEnd);\n                            }\n                            else {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        this._inputValue\n                                            .split(this.prefix)\n                                            .join('')\n                                            .slice(0, selStart) +\n                                        this._maskService.maskIsShown.slice(selStart, selEnd) +\n                                        this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength) +\n                                        this.suffix;\n                            }\n                        }\n                        else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) &&\n                            selectRangeBackspace) {\n                            if (selStart === 1 && this.prefix) {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        this._maskService.placeHolderCharacter +\n                                        el.value\n                                            .split(this.prefix)\n                                            .join('')\n                                            .split(this.suffix)\n                                            .join('') +\n                                        this.suffix;\n                                position = position - 1;\n                            }\n                            else {\n                                const part1 = el.value.substring(0, position);\n                                const part2 = el.value.substring(position);\n                                this._maskService.actualValue =\n                                    part1 + this._maskService.placeHolderCharacter + part2;\n                            }\n                        }\n                    }\n                    if (this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n                            position = Number(el.selectionStart) - 1;\n                        }\n                        else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) &&\n                            checkSpecialCharacter &&\n                            !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n                            this._maskService.actualValue =\n                                el.value.slice(0, position - 1) +\n                                    el.value.slice(position, position + 1) +\n                                    inputSymbol +\n                                    el.value.slice(position + 2);\n                            position = position + 1;\n                        }\n                        else if (checkSymbols) {\n                            if (el.value.length === 1 && position === 1) {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        inputSymbol +\n                                        this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) +\n                                        this.suffix;\n                            }\n                            else {\n                                this._maskService.actualValue =\n                                    el.value.slice(0, position - 1) +\n                                        inputSymbol +\n                                        el.value\n                                            .slice(position + 1)\n                                            .split(this.suffix)\n                                            .join('') +\n                                        this.suffix;\n                            }\n                        }\n                        else if (this.prefix &&\n                            el.value.length === 1 &&\n                            position - prefixLength === 1 &&\n                            this._maskService._checkSymbolMask(el.value, this._maskService.maskExpression[position - 1 - prefixLength] ??\n                                \"\" /* MaskExpression.EMPTY_STRING */)) {\n                            this._maskService.actualValue =\n                                this.prefix +\n                                    el.value +\n                                    this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) +\n                                    this.suffix;\n                        }\n                    }\n                }\n                let caretShift = 0;\n                let backspaceShift = false;\n                if (this._code === \"Delete\" /* MaskExpression.DELETE */ && \"separator\" /* MaskExpression.SEPARATOR */) {\n                    this._maskService.deletedSpecialCharacter = true;\n                }\n                if (this._inputValue.length >= this._maskService.maskExpression.length - 1 &&\n                    this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */ &&\n                    this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\n                    position < 10) {\n                    const inputSymbol = this._inputValue.slice(position - 1, position);\n                    el.value =\n                        this._inputValue.slice(0, position - 1) +\n                            inputSymbol +\n                            this._inputValue.slice(position + 1);\n                }\n                if (this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\n                    this.leadZeroDateTime) {\n                    if ((position < 3 && Number(el.value) > 31 && Number(el.value) < 40) ||\n                        (position === 5 && Number(el.value.slice(3, 5)) > 12)) {\n                        position = position + 2;\n                    }\n                }\n                if (this._maskService.maskExpression === \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */ &&\n                    this.apm) {\n                    if (this._justPasted && el.value.slice(0, 2) === \"00\" /* MaskExpression.DOUBLE_ZERO */) {\n                        el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n                    }\n                    el.value =\n                        el.value === \"00\" /* MaskExpression.DOUBLE_ZERO */\n                            ? \"0\" /* MaskExpression.NUMBER_ZERO */\n                            : el.value;\n                }\n                this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */, (shift, _backspaceShift) => {\n                    this._justPasted = false;\n                    caretShift = shift;\n                    backspaceShift = _backspaceShift;\n                });\n                // only set the selection if the element is active\n                if (this._getActiveElement() !== el) {\n                    return;\n                }\n                if (this._maskService.plusOnePosition) {\n                    position = position + 1;\n                    this._maskService.plusOnePosition = false;\n                }\n                // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n                if (this._maskExpressionArray.length) {\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                        position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position))\n                            ? position - 1\n                            : position;\n                    }\n                    else {\n                        position =\n                            el.selectionStart === 1\n                                ? el.selectionStart + this._maskService.prefix.length\n                                : el.selectionStart;\n                    }\n                }\n                this._position =\n                    this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n                let positionToApply = this._position\n                    ? this._inputValue.length + position + caretShift\n                    : position +\n                        (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ && !backspaceShift ? 0 : caretShift);\n                if (positionToApply > this._getActualInputLength()) {\n                    positionToApply =\n                        el.value === this._maskService.decimalMarker && el.value.length === 1\n                            ? this._getActualInputLength() + 1\n                            : this._getActualInputLength();\n                }\n                if (positionToApply < 0) {\n                    positionToApply = 0;\n                }\n                el.setSelectionRange(positionToApply, positionToApply);\n                this._position = null;\n            }\n            else {\n                console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n            }\n        }\n        else {\n            if (!this._maskValue) {\n                this.onChange(el.value);\n                return;\n            }\n            this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */);\n        }\n    }\n    // IME starts\n    onCompositionStart() {\n        this._isComposing = true;\n    }\n    // IME completes\n    onCompositionEnd(e) {\n        this._isComposing = false;\n        this._justPasted = true;\n        this.onInput(e);\n    }\n    onBlur(e) {\n        if (this._maskValue) {\n            const el = e.target;\n            if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n                const maskExpression = this._maskService.maskExpression;\n                const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n                if (precision > 1) {\n                    el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n                    const decimalPart = el.value.split(this.decimalMarker)[1];\n                    el.value = el.value.includes(this.decimalMarker)\n                        ? el.value +\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision - decimalPart.length) +\n                            this.suffix\n                        : el.value +\n                            this.decimalMarker +\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision) +\n                            this.suffix;\n                    this._maskService.actualValue = el.value;\n                }\n            }\n            this._maskService.clearIfNotMatchFn();\n        }\n        this._isFocused = false;\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            el.type !== 'number' &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        if (this._isComposing) {\n            // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n            if (e.key === 'Enter')\n                this.onCompositionEnd(e);\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (el.type !== 'number') {\n            if (e.key === \"ArrowUp\" /* MaskExpression.ARROW_UP */) {\n                e.preventDefault();\n            }\n            if (e.key === \"ArrowLeft\" /* MaskExpression.ARROW_LEFT */ ||\n                e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ ||\n                e.key === \"Delete\" /* MaskExpression.DELETE */) {\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.value.length === 0) {\n                    el.selectionStart = el.selectionEnd;\n                }\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.selectionStart !== 0) {\n                    // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                    this.specialCharacters = this.specialCharacters?.length\n                        ? this.specialCharacters\n                        : this._config.specialCharacters;\n                    if (this.prefix.length > 1 &&\n                        el.selectionStart <= this.prefix.length) {\n                        el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                    }\n                    else {\n                        if (this._inputValue.length !== el.selectionStart &&\n                            el.selectionStart !== 1) {\n                            while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ??\n                                \"\" /* MaskExpression.EMPTY_STRING */).toString()) &&\n                                ((this.prefix.length >= 1 &&\n                                    el.selectionStart > this.prefix.length) ||\n                                    this.prefix.length === 0)) {\n                                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                            }\n                        }\n                    }\n                }\n                this.checkSelectionOnDeletion(el);\n                if (this._maskService.prefix.length &&\n                    el.selectionStart <= this._maskService.prefix.length &&\n                    el.selectionEnd <= this._maskService.prefix.length) {\n                    e.preventDefault();\n                }\n                const cursorStart = el.selectionStart;\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ &&\n                    !el.readOnly &&\n                    cursorStart === 0 &&\n                    el.selectionEnd === el.value.length &&\n                    el.value.length !== 0) {\n                    this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                    this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n                }\n            }\n            if (!!this.suffix &&\n                this.suffix.length > 1 &&\n                this._inputValue.length - this.suffix.length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            else if ((e.code === 'KeyA' && e.ctrlKey) ||\n                (e.code === 'KeyA' && e.metaKey) // Cmd + A (Mac)\n            ) {\n                el.setSelectionRange(0, this._getActualInputLength());\n                e.preventDefault();\n            }\n            this._maskService.selStart = el.selectionStart;\n            this._maskService.selEnd = el.selectionEnd;\n        }\n    }\n    /** It writes the value in the input */\n    async writeValue(controlValue) {\n        if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n            if ('disable' in controlValue) {\n                this.setDisabledState(Boolean(controlValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            controlValue = controlValue.value;\n        }\n        if (controlValue !== null) {\n            // eslint-disable-next-line no-param-reassign\n            controlValue = this.inputTransformFn\n                ? this.inputTransformFn(controlValue)\n                : controlValue;\n        }\n        if (typeof controlValue === 'string' ||\n            typeof controlValue === 'number' ||\n            controlValue === null ||\n            controlValue === undefined) {\n            if (controlValue === null || controlValue === undefined || controlValue === '') {\n                this._maskService._currentValue = '';\n                this._maskService._previousValue = '';\n            }\n            // eslint-disable-next-line no-param-reassign\n            let inputValue = controlValue;\n            if (typeof inputValue === 'number' ||\n                this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = String(inputValue);\n                const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n                if (!Array.isArray(this._maskService.decimalMarker)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        this._maskService.decimalMarker !== localeDecimalMarker\n                            ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                            : inputValue;\n                }\n                if (this._maskService.leadZero &&\n                    inputValue &&\n                    this.maskExpression &&\n                    this.dropSpecialCharacters !== false) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = this._maskService._checkPrecision(this._maskService.maskExpression, inputValue);\n                }\n                if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue\n                        .toString()\n                        .replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n                }\n                if (this.maskExpression?.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.leadZero) {\n                    requestAnimationFrame(() => {\n                        this._maskService.applyMask(inputValue?.toString() ?? '', this._maskService.maskExpression);\n                    });\n                }\n                this._maskService.isNumberValue = true;\n            }\n            if (typeof inputValue !== 'string') {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = '';\n            }\n            this._inputValue = inputValue;\n            this._setMask();\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression &&\n                    (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n                typeof this.inputTransformFn !== 'function'\n                    ? (this._maskService.writingValue = true)\n                    : '';\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                // Let the service know we've finished writing value\n                typeof this.inputTransformFn !== 'function'\n                    ? (this._maskService.writingValue = false)\n                    : '';\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue = inputValue;\n        }\n        else {\n            console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n        }\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        this._maskExpressionArray.some((mask) => {\n            const specialChart = mask\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .some((char) => this._maskService.specialCharacters.includes(char));\n            if ((specialChart && this._inputValue && !mask.includes(\"S\" /* MaskExpression.LETTER_S */)) ||\n                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (test) {\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(mask)\n                                    : mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */;\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(expression)\n                                    : expression;\n                }\n            }\n            else {\n                const check = this._maskService\n                    .removeMask(this._inputValue)\n                    ?.split(\"\" /* MaskExpression.EMPTY_STRING */)\n                    .every((character, index) => {\n                    const indexMask = mask.charAt(index);\n                    return this._maskService._checkSymbolMask(character, indexMask);\n                });\n                if (check) {\n                    this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n                    return check;\n                }\n            }\n        });\n    }\n}\nNgxMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nNgxMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.8\", type: NgxMaskDirective, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", leadZero: \"leadZero\", triggerOnMaskChange: \"triggerOnMaskChange\", apm: \"apm\", inputTransformFn: \"inputTransformFn\", outputTransformFn: \"outputTransformFn\", keepCharacterPositions: \"keepCharacterPositions\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"focus\": \"onFocus($event)\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"compositionstart\": \"onCompositionStart($event)\", \"compositionend\": \"onCompositionEnd($event)\", \"blur\": \"onBlur($event)\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxMaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => NgxMaskDirective),\n            multi: true,\n        },\n        NgxMaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => NgxMaskDirective),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => NgxMaskDirective),\n                            multi: true,\n                        },\n                        NgxMaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], leadZero: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], apm: [{\n                type: Input\n            }], inputTransformFn: [{\n                type: Input\n            }], outputTransformFn: [{\n                type: Input\n            }], keepCharacterPositions: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focus', ['$event']]\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onCompositionStart: [{\n                type: HostListener,\n                args: ['compositionstart', ['$event']]\n            }], onCompositionEnd: [{\n                type: HostListener,\n                args: ['compositionend', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur', ['$event']]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxMaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n        this.defaultOptions = {};\n        this._maskExpressionArray = [];\n        this.mask = '';\n    }\n    transform(value, mask, { patterns, ...config } = {}) {\n        const currentConfig = {\n            maskExpression: mask,\n            ...this.defaultOptions,\n            ...config,\n            patterns: {\n                ...this._maskService.patterns,\n                ...patterns,\n            },\n        };\n        Object.entries(currentConfig).forEach(([key, value]) => {\n            //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n            this._maskService[key] = value;\n        });\n        if (mask.includes('||')) {\n            if (mask.split('||').length > 1) {\n                this._maskExpressionArray = mask.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask(value);\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n            else {\n                this._maskExpressionArray = [];\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n        }\n        if (mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n            return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n        }\n        if (mask.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            if (config.decimalMarker) {\n                this._maskService.decimalMarker = config.decimalMarker;\n            }\n            if (config.thousandSeparator) {\n                this._maskService.thousandSeparator = config.thousandSeparator;\n            }\n            if (config.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                this._maskService.leadZero = config.leadZero;\n            }\n            // eslint-disable-next-line no-param-reassign\n            value = String(value);\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n            if (!Array.isArray(this._maskService.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                value =\n                    this._maskService.decimalMarker !== localeDecimalMarker\n                        ? value.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                        : value;\n            }\n            if (this._maskService.leadZero &&\n                value &&\n                this._maskService.dropSpecialCharacters !== false) {\n                // eslint-disable-next-line no-param-reassign\n                value = this._maskService._checkPrecision(mask, value);\n            }\n            if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n                // eslint-disable-next-line no-param-reassign\n                value = value.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (value === null || value === undefined) {\n            return this._maskService.applyMask('', mask);\n        }\n        return this._maskService.applyMask(`${value}`, mask);\n    }\n    _setMask(value) {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(value)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (value && test) {\n                    this.mask = mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */;\n                    this.mask = expression;\n                }\n            });\n        }\n    }\n}\nNgxMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskPipe, deps: [{ token: NgxMaskService }], target: i0.ɵɵFactoryTarget.Pipe });\nNgxMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskPipe, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                }]\n        }], ctorParameters: function () { return [{ type: NgxMaskService }]; } });\n\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: NGX_MASK_CONFIG,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                NgxMaskService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, declarations: [NgxMaskDirective, NgxMaskPipe], exports: [NgxMaskDirective, NgxMaskPipe] });\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.8\", ngImport: i0, type: NgxMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [NgxMaskDirective, NgxMaskPipe],\n                    declarations: [NgxMaskDirective, NgxMaskPipe],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskModule, NgxMaskPipe, NgxMaskService, _configFactory, initialConfig, timeMasks, withoutValidation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}